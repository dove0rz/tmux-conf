# : << 'EOF'
# !! dont change the first line !!

#%if #{==:#{TMUX_PROGRAM},}
#  run 'TMUX_PROGRAM="$(LSOF=$(PATH="$PATH:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin" command -v lsof); $LSOF -b -w -a -d txt -p #{pid} -Fn 2>/dev/null | perl -n -e "if (s/^n((?:.(?!dylib$|so$))+)$/\1/g && s/(?:\s+\([^\s]+?\))?$//g) { print; exit } } exit 1; {" || readlink "/proc/#{pid}/exe" 2>/dev/null)"; {[ -f "$TMUX_PROGRAM" ] && [ -x "$TMUX_PROGRAM" ]} || TMUX_PROGRAM="$(command -v tmux || printf tmux)"; "$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_PROGRAM "$TMUX_PROGRAM"'
#%endif
#%if #{==:#{TMUX_SOCKET},}
#  run '"$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_SOCKET "#{socket_path}"'
#%endif
#%if #{==:#{TMUX_CONF},}
#  run '"$TMUX_PROGRAM" set-environment -g TMUX_CONF $(for conf in "$HOME/.tmux.conf" "$XDG_CONFIG_HOME/tmux/tmux.conf" "$HOME/.config/tmux/tmux.conf"; do [ -f "$conf" ] && printf "%s" "$conf" && break; done)'
#%endif
%if #{==:#{TMUX_CONF},}
  run 'tmux set-environment -g TMUX_CONF $(for conf in "$HOME/.tmux.conf" "$XDG_CONFIG_HOME/tmux/tmux.conf" "$HOME/.config/tmux/tmux.conf"; do [ -f "$conf" ] && printf "%s" "$conf" && break; done)'
%endif

# Set the prefix to ^A.
unbind C-b
set -g prefix ^A
bind a send-prefix

# Bind appropriate commands similar to screen.
# lockscreen ^X x
unbind ^X
bind ^X lock-server
unbind x
bind x lock-server

# screen ^C c
unbind ^C
bind ^C new-window
# bind c
bind c new-window

# detach ^D d
unbind ^D
bind ^D detach

# title A
unbind A
bind A command-prompt "rename-window \"%%\""

# 2nd ^A
unbind ^A
bind ^A last-window

# quit \
unbind \
bind \ confirm-before "kill-server"

# kill K k
unbind K
bind K confirm-before "kill-window"
unbind k
bind k confirm-before "kill-window"

# redisplay ^L l
unbind ^L
bind ^L refresh-client
unbind l
bind l refresh-client

# split -v |
unbind "|"
bind "|" "split-window -h"

# split _ because cannot bind - in conf file
unbind _
bind _ "split-window -v"

# :kB: focus up
unbind Tab
bind Tab select-pane -t:.+
unbind BTab
bind BTab select-pane -t:.-

# " windowlist -b
unbind '"'
bind '"' choose-window

unbind '?'
bind '?' list-keys

# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
#bind s split-window -v
#bind | split-window -v
#bind v split-window -h
#bind - split-window -h

# move around panes with hjkl, as one would in vim after pressing ctrl-w
#bind h select-pane -L
#bind j select-pane -D
#bind k select-pane -U
#bind l select-pane -R

# resize panes like vim
# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
bind < resize-pane -L 1
bind > resize-pane -R 1
bind - resize-pane -D 1
bind + resize-pane -U 1
#set -g mouse-resize-pane on

# bind : to command-prompt like vim
# this is the default in tmux already
bind : command-prompt

unbind m
bind m run "cut -c3- '#{TMUX_CONF}'| sh -s _toggle_mouse"
unbind ^m
bind ^m run "cut -c3- '#{TMUX_CONF}'| sh -s _toggle_mouse"

# refresh config
#unbind r
#bind r run "tmux source-file '#{TMUX_CONF}'"

# vi-style controls for copy mode
setw -g mode-keys vi

#to show unicode icon: #(echo '\uf240')
#set-environment -g symbol_prefix "‚å®" # ‚å® ‚ñ£ ‚ñ¢ ‚ñ∞ ‚óÜ ‚óá ‚óä ‚óè ‚òÖ ‚òÜ ‚òê ‚òë ‚òí ‚òò ‚ôß ‚ò∏ ü¶ï üíª
#set-environment -g symbol_copy "‚ùè" # ‚ùè ‚ùê ‚ùë ‚ùí ‚ßâ 
#set-environment -g symbol_sync "" # ‚áå ‚áÑ ‚áî ‚õñ ‚ü∫
#set-environment -g symbol_weather "" # ‚òÄ ‚òÅ ‚òÇ ‚òî ‚òÉ ‚òï ‚õá   ‚õà ‚õÖ ‚õÑ ‚õà ‚õ± 
#set-environment -g symbol_power "" # ‚ö°‚ö†

# here are all the indicators you can use: 
set-environment -g indicator_mouse " "
set-environment -g indicator_mode "#{?client_prefix,PRFX,#{?pane_in_mode,COPY,#{?pane_synchronized,SYNC,    }}}" # use ${indicator_mode}, not #{indicator_mode}
set-environment -g indicator_cpuTemperature "Wait"
set-environment -g indicator_cpuUsage "Wait"

set -g default-terminal "xterm-256color" # + "tmux -2" => 256 color
set -g status-justify left
set -g status-interval 3
set -g display-time 3000
set -g status-bg colour235
set -g status-fg white
set -g window-status-current-format "[#I:#W]"
set -g window-status-current-style bg=blue,fg=white,bold
set -g status-left-length 15
set -g status-right-length 75
set -g status-left ""
set -g status-right "#{indicator_netspeed_br0} #{indicator_cpuUsage} #{indicator_cpuTemperature} #[fg=colour166][#[fg=cyan,bright]#H#[fg=colour166]] #[fg=colour69,nobold]%Y-%m-%d #[fg=colour75,bold]%H:%M#[default]"

run "cut -c3- '#{TMUX_CONF}' | sh -s _update_indicators 0" # 0 -> kill all _update_indicators process
run "cut -c3- '#{TMUX_CONF}' | sh -s _update_indicators" # comment this line if you dont need any indicator

# !! dont change EOF unless you know what you are doing !!
# EOF
# 
# _ratio() {
#   min=$1
#   max=$2
#   target=$3
#   if [ $target -lt $min ]; then
#     target=$min
#   elif [ $target -gt $max ]; then
#     target=$max
#   fi
#   #p=$(echo "scale=4; ($target - $min) / ($max - $min)" | bc)
#   r=$(awk "BEGIN { scale=4; printf \"%.4f\", ($target - $min) / ($max - $min); }")
#   echo "$r"
# }
#
#  # to show color from your shell:
#  #for i in {0..255} ; do printf "\x1b[38;5;${i}mcolour${i}\n"; done
#  #for i in {0..255}; do printf "\x1b[38;5;${i}mcolour${i}\t"; (( (i+1) % 8 == 0 )) && echo; done
#
# _color() {
#   style=$1
#   ratio=$2
#   case "$style" in 
#     "gradient")  palette="46 82 118 154 190 226 220 214 208 202 196" ;;
#     "gradient-") palette="196 202 208 214 220 226 190 154 118 82 46" ;;
#     "heat")  palette="233 234 235 237 239 241 243 245 247 144 143 142 184 214 208 202 196" ;;
#     "heat-") palette="196 202 208 214 184 142 143 144 247 245 243 241 239 237 235 234 233" ;;
#     "heat2") palette="240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 " ;;
#     "white") palette="240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255" ;;
#     "white-") palette="255 254 253 252 251 250 249 248 247 246 245 244 243 242 241 240" ;;
#     *) ;;
#   esac
#   if [ -n "$palette" ]; then
#     color=$(echo "$palette" | awk -v r="$ratio" '{n=NF; i=int((n-1)*r+0.5); if(i<1)i=1; if(i>n)i=n; print $i}')
#   else
#     color=$style
#   fi
#   echo "#[bg=none]#[fg=color${color}]"
# }
#
# _hbar() {
#   ratio=$1
#   #eval set -- "‚ñè ‚ñé ‚ñç ‚ñå ‚ñã ‚ñä ‚ñâ ‚ñà"
#   #eval $(awk "BEGIN { printf \"hbar_symbol=$%d\", ($ratio) * ($# - 1) + 1 }")
#   vbar_symbol=$(awk -v r="$ratio" -v s="‚ñè ‚ñé ‚ñç ‚ñå ‚ñã ‚ñä ‚ñâ ‚ñà" 'BEGIN{n=split(s,a); i=int((n-1)*r+0.5); if(i<1)i=1; if(i>n)i=n; print a[i]}')
#   printf '%s' "$hbar_symbol"
# }
#
# _vbar() {
#   ratio=$1
#   vbar_symbol=$(awk -v r="$ratio" -v s="‚ñÅ ‚ñÇ ‚ñÉ ‚ñÑ ‚ñÖ ‚ñÜ ‚ñá ‚ñà" 'BEGIN{n=split(s,a); i=int((n-1)*r+0.5); if(i<1)i=1; if(i>n)i=n; print a[i]}')
#   printf '%s' "$vbar_symbol"
# }
#
# _vbarHistory() {
#   max=$(($1 - 1))
#   ratio=$2
#   arr=$(echo "$3"|tr ' ' '\n'|tail -$max) # history
#   newSym=$(_vbar $ratio)
#   newColor=$(_color gradient $ratio)
#   echo "${arr} ${newColor}${newSym}"
# }
#
# _strip() {
#   local r=$(echo "$1"| tr -d '[:space:]')
#   echo "$r"
# }
#
# _toggle_mouse() {
#   old=$(tmux show -gv mouse)
#   new=""
#   if [ "$old" = "on" ]; then
#     new="off"
#     $(tmux set-environment -g indicator_mouse "‚Üó")
#   else
#     new="on"
#     $(tmux set-environment -g indicator_mouse " ")
#   fi
#   tmux set -g mouse $new
# }
#
# _numfmt() {
#   local num=$1
#   local base=1000 # can be 1024
#   local unit=""
#   local UNITS="B K M G T P E Y"
#   for unit in $UNITS; do
#     test ${num%.*} -lt $base && break;
#     num=$(echo "$num $base" | awk '{printf "%.3f",$1/$2}')
#   done
#   if [ "$unit" = "B" ]; then
#     printf "%5.0f%s" $num $unit
#   else
#     printf "%5.01f%s" $num $unit
#   fi
# }
# 
#  # no parameter: foreground call to background, nextAction is 1
#  # 1: background, update -> sleep -> nextAction is 1
#  # 0: kill all the action is 1 -> return
# _update_indicators() {
#   nextAction=$1
#   status_left=$(tmux show -gqv status-left)
#   status_right=$(tmux show -gqv status-right)
#   statusInterval=$(tmux show -gv status-interval)
#   measureTime=1
#   timeUsed=0
#
#   if [ -n "$nextAction" ]; then # var is set
#     if [ "$nextAction" -eq "0" ]; then
#       # kill background process
#       kill `ps ax | grep '_update_indicators 1' | grep -v grep | awk '{print $1}'` 2> /dev/null
#       interfaces=$(echo "$status_left $status_right" | awk '{while(match($0,/#\{indicator_netspeed_([^}]+)\}/)>0){print substr($0,RSTART+21,RLENGTH-22);$0=substr($0,RSTART+RLENGTH)}}')
#       for i in $interfaces; do
#         $(tmux set-environment -g "indicator_netspeed_$i" "Wait")
#       done
#       exit 0
#     fi
#   else
#     # dont let the tmux first time waiting (because there are sleeps in this function)
#     tmux run -b "cut -c3- '$TMUX_CONF' | sh -s _update_indicators 1 &"
#     return 0
#   fi
#
#   # check if tmux is running
#   if tmux list-sessions | grep "no server" > /dev/null; then exit 0; fi
#
#   # cpu usage (todo: sleep $measureTime used in several place, try to gather them and sleep only once)
#   haveCpuUsage=$(echo "$status_left $status_right"|grep -c '#{indicator_cpuUsage}')
#   if [ "$haveCpuUsage" -ge "1" ]; then
#     cu1=$(grep 'cpu ' /proc/stat)
#     sleep $measureTime
#     cu2=$(grep 'cpu ' /proc/stat)
#     timeUsed=$(echo "$timeUsed $measureTime"|awk '{printf "%.1f",$1+$2}')
#     cu_num=$(echo "${cu1}\n${cu2}" | awk '{u=$2+$4; t=$2+$4+$5; if (NR==1){u1=u; t1=t;} else { v=($2+$4-u1)*100/(t-t1); printf (v>=100) ? "%3.0f" : "%3.1f", v;} }')
#     cu_ratio=$(_ratio 0 100 $cu_num)
#     cu_color=$(_color gradient $cu_ratio)
#     cu_icon=$(_vbar $cu_ratio)
#     $(tmux set-environment -g indicator_cpuUsage "${cu_color}${cu_icon}${cu_num}%#[default]")
#   else
#     $(tmux set-environment -g indicator_cpuUsage "")
#   fi
# 
#   # cpu temperature (require: lm-sensors, alternative: /sys/class/thermal/thermal_zone*/temp)
#   haveCpuTemperature=$(echo "$status_left $status_right"|grep -c '#{indicator_cpuTemperature}')
#   if [ "$haveCpuTemperature" -ge "1" ]; then
#     ct_avg=$(/usr/bin/sensors|grep Core|awk '{ gsub(/[^0-9.]/,"",$3); sum+=$3; count++ } END { if(count>0) printf "%.0f",sum/count }')
#     ct_ratio=$(_ratio 0 70 $ct_avg)
#     ct_color=$(_color heat $ct_ratio)
#     ct_icon=$(_vbar $ct_ratio)
#     $(tmux set-environment -g indicator_cpuTemperature "${ct_color}${ct_icon}${ct_avg}¬∞C#[default]")
#   else
#     $(tmux set-environment -g indicator_cpuTemperature "")
#   fi
#
#   # hwmon temperature support
#   hwmons=$(echo "$status_left $status_right"|awk '{while(match($0,/#\{indicator_(hwmon[^}]+)\}/)>0){print substr($0,RSTART+12,RLENGTH-13);$0=substr($0,RSTART+RLENGTH)}}')
#   if [ -n "$hwmons" ]; then
#     for h in $hwmons; do
#       hw_avg=$(cat /sys/class/hwmon/$h/temp*_input|awk '{sum += $1;} END{printf "%.1f\n",sum/NR/1000;}')
#       hw_ratio=$(_ratio 0 70 $hw_avg)
#       hw_color=$(_color heat $hw_ratio)
#       hw_icon=$(_vbar $hw_ratio)
#       $(tmux set-environment -g "indicator_${h}" "${hw_color}${hw_icon}${hw_avg}¬∞C#[default]")
#     done
#   fi
#
#   # netspeed (alternative: /sys/class/net/$interface/statistics/rx_bytes and tx_bytes)
#   netspeed_HistoryCount=6
#   interfaces=$(echo "$status_left $status_right"|awk '{while(match($0,/#\{indicator_netspeed_([^}]+)\}/)>0){print substr($0,RSTART+21,RLENGTH-22);$0=substr($0,RSTART+RLENGTH)}}')
#   if [ -n "$interfaces" ]; then
#     t1=$(cat /proc/net/dev | grep ":")
#     sleep $measureTime
#     t2=$(cat /proc/net/dev | grep ":")
#     timeUsed=$(echo "$timeUsed $measureTime"|awk '{printf "%.1f",$1+$2}')
#     for i in $interfaces; do
#       rx1=$(echo "$t1" | grep "$i" | awk '{print $2}')
#       tx1=$(echo "$t1" | grep "$i" | awk '{print $10}')
#       rx2=$(echo "$t2" | grep "$i" | awk '{print $2}')
#       tx2=$(echo "$t2" | grep "$i" | awk '{print $10}')
#       rx=$(echo "$rx1 $rx2 $measureTime" | awk '{printf "%.03f",($2-$1)/$3}')
#       tx=$(echo "$tx1 $tx2 $measureTime" | awk '{printf "%.03f",($2-$1)/$3}')
#       if [ "${netspeed_HistoryCount}" -ge 1 ]; then
#         net_speed=$(echo "$rx $tx" | awk '{printf "%.03f",($1+$2)}') # rx + tx
#         net_ratio=$(_ratio 0 1000000 $net_speed) # 1MB -> 100%
#         net_history=$(tmux show-environment -g "indicator_netspeed_${i}_history" | sed "s/^indicator_netspeed_${i}_history=//")
#         net_history=$(_vbarHistory $netspeed_HistoryCount $net_ratio "$net_history")
#       else
#         net_history=""
#       fi
#       $(tmux set-environment -g "indicator_netspeed_${i}_history" "$net_history")
#       # symbols for your choice: ‚Üë‚ñ≤‚¨Ü‚≠°ü†ôü†ùü†µü†±ü°ëü¢ô ‚Üì‚ñº‚¨á‚≠£ü†õü†üü†∑ü†≥ü°ìü¢õ
#       $(tmux set-environment -g "indicator_netspeed_${i}" "$(_strip "$net_history")#[fg=colour141]$(_numfmt $tx)‚Üë#[default],#[fg=colour159]$(_numfmt $rx)‚Üì#[default]")
#     done
#   fi
# 
#   # sleep (status-interval - timeUsed, check if sleep time < 0)
#   if [ -n "$nextAction" ]; then # var is set
#     if [ "$nextAction" -eq "1" ]; then
#       sleepTime=$(echo "$statusInterval $timeUsed"|awk '{result = $1 - $2 - 0.3; if (result < 0) result = 0; printf "%.1f", result}')
#       sleep $sleepTime
#     fi
#   fi
#
#   # prepare next run
#   tmux run -b "cut -c3- '$TMUX_CONF' | sh -s _update_indicators 1 &"
# }
# 
# # !! do not modify !!
# "$@"
